a {
    color: #2176FF;
    text-decoration: underline;
    cursor: pointer;
  }
  
  a:hover {
    text-decoration: none;
  }
  
  .nav-link {
    text-decoration: none;
  }
  
  .nav-link:hover {
    color: #5495ff;
  }
  
  .btn {
    background-color: #2176FF;
    border-radius: 2px;
    color: #ffffff;
    font-family: 'Raleway',sans-serif;
    font-size: 16px;
    font-weight: 400;
    padding: 14px;
    text-decoration: none;
    text-transform: uppercase;
    cursor: pointer;
  }
  
  .btn:hover {
    background-color: #fff;
    color: #2176FF;
    transition: color .1s ease-in, background-color .1s ease-in;
  }
  
  .btn:active {
    font-size: 18px;
    transition: font-size .1s ease-in-out;
  }
  
  .activity {
    border: 1px solid #2176FF;
  }
  
  .activity:hover {
    background-color: #fff;
    color: #5495ff;
    transition: color .1s ease-in, background-color .1s ease-in;
  }
  
  .activity:active {
    font-size: 40px;
    transition: font-size .1s;
  }
  
  /* IMPROVED STYLING WITH CSS
The Summit
Time to put some navigation design knowledge to the test! Your goal is to improve the user experience of this ski lodge landing page. Currently, none of the clickable elements are very clear or offer good visual feedback to users.

The exact implementation and styling will be up to you; take the opportunity to be creative in your designs! Keep in mind that slick styling is cool, but it is just as important to clearly demonstrate to users how to interact with the site. We’ll provide some hints along the way if you’re stuck.

If you get stuck during this project or would like to see an experienced developer work through it, click “Get Unstuck“ to see a project walkthrough video.

Tasks
6/6 complete
Mark the tasks as complete by checking them off
Basic link styling
1.
The site has basic styles laid out in starting.css. We’ve provided a blank style.css file for writing your own styles with less clutter, but feel free to write your CSS in whichever file you want. You shouldn’t need to edit the index.html file, but you can reference it and make changes if you need to. Before you begin, take a look through index.html to get acquainted with the site structure.

Start by creating some basic link color highlighting and hover state styling for all <a> tags. Open the hint below if you want to see how we implemented our styles. Throughout, we’ll provide examples of one possible way to implement the styling task, but there are essentially unlimited possible ways to solve each task!


Hint
a {
  color: #2176FF;
  text-decoration: underline;
  cursor: pointer;
}

a:hover {
  text-decoration: none;
}

2.
Style the .nav-link elements at the top of the page so that they show clickability. These elements represent the main site navigation. Because they are internal links, don’t necessarily need to look the same as the external links in the description below.


Hint
These styles will show some feedback on mouse over, but also eliminate the underline, as it is not necessary for the links to be underlined in the main menu.

.nav-link {
  text-decoration: none;
}

.nav-link:hover {
  color: #5495ff;
}

Styling buttons
3.
Style the main “get on the mountain” button. This button can be selected with the .btn class. It is up to you whether to opt for a more skeuomorphic or flat design, or whether you want to try to blend between the two. Start by doing a basic button style, we’ll get to :hover and :active styles in the next step.

Our implementation uses a different font from the headings which has been loaded into the workspace. Feel free to use this declaration if you want to follow suit: font-family: 'Raleway', sans-serif;


Hint
Here’s one implementation of a flat design with slightly rounded corners.

.btn {
  background-color: #2176FF;
  border-radius: 2px;
  color: #ffffff;
  font-family: 'Raleway',sans-serif;
  font-size: 16px;
  font-weight: 400;
  padding: 14px;
  text-decoration: none;
  text-transform: uppercase;
  cursor: pointer;
}

4.
Now, create :hover and :active styles for the .btn class. As you add styles, continue testing in the browser to make sure you’re creating clear visual feedback. Remember, you can alter all sorts of CSS properties such as text color, background-color, font-size, border properties, and much more.

You can also use CSS transitions to ease between style states—this is optional but can help make more seamless, animated effects.


Hint
.btn:hover {
  background-color: #fff;
  color: #2176FF;
  transition: color .1s ease-in, background-color .1s ease-in;
}

.btn:active {
  font-size: 18px;
  transition: font-size .1s ease-in-out;
}

Activity buttons
5.
Now it’s time to show clickability for the large activity buttons at the bottom of the page. These buttons already look a little like buttons, as they are square and have basic text, but they don’t show any clickability.

These buttons can be targeted by class with the .activity selector. Begin by showing their clickability. This is also your chance to alter or update their basic styling if you’d like to take a more skeuomorphic design approach.


Hint
We added this styles to the button class:

.activity {
  border: 1px solid #2176FF;
  cursor: pointer;
  text-decoration: none;
}

6.
Now, create hover and active states. As before, make sure you are demonstrating good visual feedback to show the different states.


Hint
Our implementation changes only a few css properties, and takes an approach similar to the btn class.

.activity:hover {
  background-color: #fff;
  color: #5495ff;
  transition: color .1s ease-in, background-color .1s ease-in;
}

.activity:active {
  font-size: 40px;
  transition: font-size .1s;
} */
